## aliases
[alias]
    ## add
    a       = add
    aa      = ! git add --all && git s
    aac     = ! git add --all && git commit
    ac      = ! git add --update && git commit
    ai      = add --all --interactive
    au      = ! git add --update && git s
    auc     = ! git add --update && git commit

    ## branch
    b       = branch
    bd      = branch --delete
    bl      = branch --list
    bv      = branch -v
    br      = branch --remote
    brv     = branch --remote -v
    # delete local branches that have been merged into main (adapted from https://stackoverflow.com/a/16906759)
    delete  = ! git fetch --prune && git branch --merged main | rg -v '^[ *]*main$' | xargs --no-run-if-empty git branch -d
    swc     = switch --create # create new branch and switch to it

    ## commit
    amend   = commit --amend
    c       = commit
    ca      = commit --amend
    call    = commit --all
    can     = ca --no-edit
    cm      = commit -m
    cmnv    = cm --no-verify
    cp      = cherry-pick

    ## checkout
    back    = checkout -
    co      = checkout # create and checkout a new branch
    cob     = checkout -b
    cof     = checkout --force
    main    = checkout main
    master  = checkout master

    ## diff
    d       = diff
    ds      = diff --staged
    dt      = difftool
    dts     = difftool --staged

    ## fetch
    f       = fetch --all
    fm      = fetch origin main:main # update local main branch to match origin

    ## log
    l       = log -n25 --pretty='format:%C(yellow)%h %C(magenta)%as %C(blue)%aL %C(cyan)%s%C(reset)'
    l1      = l -1 --compact-summary # show last commit with summary
    last    = log -1 HEAD --compact-summary
    lc      = l --compact-summary
    lm      = l --merges
    lmc     = l --compact-summary
    ln      = log -n
    lnc     = log --compact-summary -n
    lnm     = l --no-merges
    lnmc    = lnm --compact-summary
    lp      = log --patch --compact-summary # show diffs
    lp1     = lp -1 --compact-summary # show last commit with diff
    ls      = ls-files

    ## merge
    m       = merge
    ma      = merge --abort
    mc      = merge --continue
    mt      = mergetool

    ## pull
    p       = pull
    pa      = pull --autostash
    pr      = pull --rebase
    pra     = pull --rebase --autostash

    ## push
    ps      = push
    psf     = push -v --force-with-lease
    psnv    = push -v --no-verify # bypass pre-push hook
    publish = push -v --set-upstream origin HEAD

    ## rebase
	r			= rebase
	ra      	= rebase --abort
	rc      	= rebase --continue
    remain   	= rebase --interactive origin/main
    remaster 	= rebase --interactive origin/master
	reorigin	= ! git rebase --interactive origin/`git branch --show-current`
	ri      	= rebase --interactive

    ## reset
    rt      = reset
    rtm     = reset --mixed
    rts     = reset --soft
    rth     = reset --hard
    # reset last commit or last $1 commits and keeps undone changes in working directory
    undo    = ! "f() { if [[ $# -eq 0 ]] ; then git reset HEAD~1 --mixed; else git reset HEAD~$1 --mixed; fi; }; f"

    ## restore
    uns     = unstage
    unsall  = unstage *
    unstage = restore --staged
    rest    = restore

    ## stash
    checkpoint  = !stash push --include-untracked && git stash apply # stash changes but keep them in staging area
    pop         = stash pop
    stashh      = stash push --include-untracked # *not* stash push --all, which includes ignored files

    ## status
    s   = ss
    sl  = status --long
    ss  = status --short --branch
    sv  = svv
    svv = status -vv

    ## tag
    current-tags    = tag --list --points-at HEAD
    t               = current-tags

    ## misc
    alias   = ! git config --get-regexp ^alias\\. | sed -e s/^alias\\.// -e s/\\ /\\ =\\ / | sort
    # reset author for last commit or last $1 commits
    author  = ! "f() { if [[ $# -eq 0 ]] ; then echo git rebase HEAD~1 -x \"git commit --amend --no-edit --reset-author\"; else git rebase HEAD~$1 -x \"git commit --amend --no-edit --reset-author\"; }; f"
    chx     = update-index --chmod=+x
    fg      = forgit
    sbs     = ! DELTA_FEATURES=sbs git # use delta in side-by-side mode
    # update local branch from origin without checking it out
    update  = ! "f() { if [[ $# -eq 0 ]] ; then echo "must supply a branch name"; else git fetch origin $1:$1; }; f"
    unwind  = update
